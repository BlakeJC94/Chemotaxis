function AnalyseDictyShape
% Function for analysing the images from Dicty data
% Based on code from David M. Richards - 14/08/2017
% Blake Cook - 6/12/2017
% ======================== %

%% Analysis paramters: 
%  - CHANNEL  - use channel number CHANNEL(1) out of total of CHANNEL(2) channels
%  - FRAME_RANGE - which frames to analysis; [-1 Inf] => all frames
%  - ROI - region of interest as [x1 y1 x2 y2]; [-1 -1 Inf Inf] => full image
%  - REGIONS_TO_IGNORE - regions to remove from final image as [x1 y1 x2 y2]
 
warning('off','MATLAB:imagesci:tiffmexutils:libtiffWarning');
clf;
set(gcf, 'Position', get(0,'Screensize'));

% *** File "DictyElectrotaxis_171116_001" - 953Mb - 271 frames - 3 channels - 1280x960
DIR = 'data/'; %B: Directory changed to work on my laptop
FILENAME = 'DictyElectrotaxis_171116_001.tif';
CHANNEL = [3 3];
FRAME_RANGE = [215 232]; %B: looking at few frames for now, default "[155 271]"
FRAME_JUMP = 1;
ROI = [340 500 880 800];
REGIONS_TO_IGNORE = [95 5 185 100; 190 1 280 25; 320 1 350 20; 310 140 390 210; 480 225 510 260];
AREA_LIMITS = [500 10000];


%% Plot parameters:
%  - PLOT_NUMS - plot numbers to show
%  - PLOT_MARGIN - margins around each subplot
%  - PLOT_NUM_COLS_LIST, PLOT_NUM_ROWS_LIST - number of rows/rows for subplot
%  - IMAGE_NAMES - names for images

PLOT_NUMS = 1:7; 
PLOT_MARGIN_X = 0.003;
PLOT_MARGIN_Y = 0;
PLOT_NUM_ROWS_LIST = [ 1 1 2 2 2 2 3 3 ]; 
PLOT_NUM_COLS_LIST = [ 1 2 2 2 3 3 3 3 ]; 
IMAGE_NAMES = {'I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7'}; 


%% Read header info

file_info = imfinfo([DIR FILENAME]);
im_width = file_info(1).Width;
im_height = file_info(1).Height;
num_images = numel(file_info);

if mod(num_images,CHANNEL(2))~=0
    error(['Total number of frames (' num2str(num_images) ') not multiple of number of channels (' num2str(CHANNEL(2)) ')']);
end
num_frames = num_images/CHANNEL(2);

if (FRAME_RANGE(1)==-1); FRAME_RANGE(1)=1; end;
if (FRAME_RANGE(2)==Inf); FRAME_RANGE(2)=num_frames; end;

num_frames_range = numel(FRAME_RANGE(1):FRAME_JUMP:FRAME_RANGE(2));

if (ROI(1)==-1); ROI(1)=1; end;
if (ROI(2)==-1); ROI(2)=1; end;
if (ROI(3)==Inf); ROI(3)=im_width; end;
if (ROI(4)==Inf); ROI(4)=im_height; end;

ROI_width  = ROI(3) - ROI(1) + 1;
ROI_height = ROI(4) - ROI(2) + 1;

num_plots = numel(PLOT_NUMS);


%% Declare variables:
%  - im - holds all images
%  - im_full - holds full frame

im = zeros(ROI_height,ROI_width,num_frames,'uint8'); 
im_full = zeros(im_height,im_width); 


%% Read in images

tif_obj = Tiff([DIR FILENAME],'r');
for i = 1:num_frames
   tif_obj.setDirectory(CHANNEL(1)+CHANNEL(2)*(i-1));
   im_full = tif_obj.read();
   im(:,:,i) = im_full(ROI(2):ROI(4),ROI(1):ROI(3));
end
tif_obj.close();

%% Find background image

im_bg = zeros(ROI_height, ROI_width, 'double');
for frameNum = FRAME_RANGE(1):FRAME_JUMP:FRAME_RANGE(2)
    for i = 1:ROI_height
        for j = 1:ROI_width
            im_bg(i,j) = im_bg(i,j) + double(im(i,j,frameNum));
        end
    end
end
im_bg = int8(round( im_bg/num_frames_range ));


%% Analyse Images

%https://au.mathworks.com/help/images/examples/detecting-a-cell-using-image-segmentation.html


for frameNum = FRAME_RANGE(1):FRAME_JUMP:FRAME_RANGE(2)
    
    %Read image
    I1 = im(:,:,frameNum);
    temp = I1;
    I1 = histeq(I1);
    
    %Edge detection
%     [~, threshold] = edge(I1,'sobel');
%     fudgeFactor = 2.28;
%     I2 = edge(I1, 'sobel', threshold * fudgeFactor);
    I2 = edge(I1,'canny',0.95); 
    
    %Dilate image
    dilationFactor = 3; %10
    se90 = strel('line', dilationFactor, 90);
    se0 = strel('line', dilationFactor, 0);
    I3 = imdilate(I2, [se90 se0]);
    
    %Fill gaps
    I4 = imfill(I3, 'holes');
    
    %Clear borders and smoothen 
    I5 = imclearborder(I4, 4);
    seD = strel('diamond',1);
    I5 = imerode(I5, seD);
    I5 = imerode(I5, seD);
    
    %Compute distance transform
    I6 = bwdist(I5)
    
    %Overlay outline on original
    cellOutline = bwperim(I6);
    I7 = temp; %replace temp with I1
    I7(cellOutline) = 255;
    
    
    %Plot images 
    plot_num_rows = PLOT_NUM_ROWS_LIST(num_plots);
    plot_num_cols = PLOT_NUM_COLS_LIST(num_plots);
    plot_num = 0;
    for im_num = PLOT_NUMS
        plot_num = plot_num + 1;
        plot_i = floor((plot_num - 1)/plot_num_cols);
        plot_j = mod(plot_num - 1, plot_num_cols);
        pos = zeros(1,4);
        pos(1) = plot_j/plot_num_cols + PLOT_MARGIN_X;
        pos(2) = 1 - (plot_i+1)/plot_num_rows + PLOT_MARGIN_Y;
        pos(3) = 1/plot_num_cols - 2*PLOT_MARGIN_X;
        pos(4) = 1/plot_num_rows - 2*PLOT_MARGIN_Y;
        subplot('Position', pos);
        eval(['imshow(I' num2str(im_num) ',''InitialMagnification'', ''fit'');']);
        title(IMAGE_NAMES(im_num), 'FontSize',16);
        
    end
    set(gcf,'Name',[FILENAME ': frame ' num2str(frameNum) '/' num2str(num_frames)], 'NumberTitle', 'off');
    drawnow();
end




% for frameNum = FRAME_RANGE(1):FRAME_JUMP:FRAME_RANGE(2)
%     
%     Read image
%     I1 = im(:,:,frameNum);
%     
%     Subtract background
%     I2 = int8(I1) - im_bg;
%     I2 = int8(I2>=0).*I2; %Interior 
%     I2 = -int8(I2<=0).*I2; %Exterior
%     I2 = uint8(I2);
%     
%     Test using threshold
%     I3 = zeros(ROI_height,ROI_width,'logical');
%     for i = 1:ROI_height
%         for j = 1:ROI_width
%             if I2(i,j) < 8 
%                 I3(i,j) = 0;
%             else 
%                 I3(i,j) = 1;
%             end
%         end
%     end
%     
%     Remove small and large areas
%     I4 = I3 - bwareaopen(I3,AREA_LIMITS(2));
%     I4 = bwareaopen(I4,AREA_LIMITS(1));
%     
%     %Edge detection
%     I4 = edge(I3, 'canny',0.37); 
%     
%     Try looking at the bright spots? background is grey, cell exterior is
%     black, cell interior is white.. 
%     
%     Plot images 
%     plot_num_rows = PLOT_NUM_ROWS_LIST(num_plots);
%     plot_num_cols = PLOT_NUM_COLS_LIST(num_plots);
%     plot_num = 0;
%     for im_num = PLOT_NUMS
%         plot_num = plot_num + 1;
%         plot_i = floor((plot_num - 1)/plot_num_cols);
%         plot_j = mod(plot_num - 1, plot_num_cols);
%         pos = zeros(1,4);
%         pos(1) = plot_j/plot_num_cols + PLOT_MARGIN_X;
%         pos(2) = 1 - (plot_i+1)/plot_num_rows + PLOT_MARGIN_Y;
%         pos(3) = 1/plot_num_cols - 2*PLOT_MARGIN_X;
%         pos(4) = 1/plot_num_rows - 2*PLOT_MARGIN_Y;
%         subplot('Position', pos);
%         eval(['imshow(I' num2str(im_num) ',''InitialMagnification'', ''fit'');']);
%         title(IMAGE_NAMES(im_num), 'FontSize',16);
%         
%     end
%     set(gcf,'Name',[FILENAME ': frame ' num2str(frameNum) '/' num2str(num_frames)], 'NumberTitle', 'off');
%     drawnow();
% end



% %% Try edge dection?
% testframe = 200;
% 
% im_sobel = edge(im(:,:,testframe), 'sobel');
% im_canny = edge(im(:,:,testframe), 'canny');
% im_prewitt = edge(im(:,:,testframe), 'prewitt');
% 
% %% testplots
% 
% figure;
% I1 = im(:,:,testframe); 
% imshow(I1,'InitialMagnification','fit');
% 
% figure;
% I2 = int16(im(:,:,testframe)) - im_bg(:,:);
% I2 = uint8(I2);
% imshow(I2,'InitialMagnification','fit');
% 
% % figure;
% % I2 = im_canny(:,:);
% % for i = 1:size(REGIONS_TO_IGNORE,1)
% %     for j = REGIONS_TO_IGNORE(i,2):REGIONS_TO_IGNORE(i,4)
% %         for k = REGIONS_TO_IGNORE(i,1):REGIONS_TO_IGNORE(i,3)
% %             I2(j,k) = 0;
% %         end
% %     end
% % end
% % imshow(I2,'InitialMagnification','fit');


end